name: Build and Test Wheels

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --with build

      - name: Build sdist
        run: poetry build --format=sdist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*.tar.gz

  build_wheels_linux:
    name: Build wheels on Linux
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
          CIBW_ARCHS_LINUX: x86_64 aarch64
          CIBW_TEST_REQUIRES: pytest numpy
          CIBW_TEST_COMMAND: pytest {package}/tests -v
          CIBW_BUILD_VERBOSITY: 1

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: wheelhouse/*.whl

  build_wheels_macos:
    name: Build wheels on macOS
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
          CIBW_ARCHS_MACOS: x86_64 arm64
          CIBW_TEST_REQUIRES: pytest numpy
          CIBW_TEST_COMMAND: pytest {package}/tests -v
          CIBW_BUILD_VERBOSITY: 1

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: wheelhouse/*.whl

  build_wheels_windows:
    name: Build wheels on Windows
    runs-on: windows-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.21.3
        env:
          CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
          CIBW_ARCHS_WINDOWS: AMD64
          CIBW_TEST_REQUIRES: pytest numpy
          CIBW_TEST_COMMAND: pytest {package}/tests -v
          CIBW_BUILD_VERBOSITY: 1

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: wheelhouse/*.whl

  test_wheels:
    name: Test built wheels
    needs: [build_wheels_linux, build_wheels_macos, build_wheels_windows, build_sdist]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Install wheel
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy pytest
          # Install the wheel for this platform and Python version
          python -m pip install dist/*.whl || python -m pip install dist/*.tar.gz

      - name: Test import
        run: |
          python -c "import brisket; print(f'Brisket version: {brisket.__version__}')"
          python -c "import brisket; import numpy as np; result = brisket.encode_seq('ATCG'); print(f'Test encoding shape: {result.shape}')"

  upload_pypi:
    name: Upload to PyPI
    needs: [test_wheels]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/brisket
    permissions:
      id-token: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1